SHELL := /bin/bash

.PHONY: run clean test pylint safety

PY?=python3.8

PYTHON_ROOT=$(realpath ./imposc-service/imposcpy)
NODE_ROOT=$(realpath ./imposc-ui)
NODE_TARGET=$(NODE_ROOT)/node_modules
VENVDIR?=$(PYTHON_ROOT)/.venv
VENV=$(VENVDIR)/bin
GUNICORN=$(VENV)/gunicorn
REQUIREMENTS=$(PYTHON_ROOT)/requirements
REQUIREMENTS_TEST=$(PYTHON_ROOT)/requirements-test
TOUCH=touch
MAIN_MODULE=imposc
PYTHONPATH=$(PYTHON_ROOT)/src
MARKER=.marker

PORT?=5000
URL?=localhost

PYTHON=PYTHONPATH=$(PYTHONPATH) $(VENV)/python

venv: $(VENV)/$(MARKER)  ## Generate a Python virtual environment with the required dependencies

$(VENV)/$(MARKER):
	$(PY) -m venv $(VENVDIR)
	$(PYTHON) -m pip install --upgrade pip setuptools wheel
	@touch $(VENV)/$(MARKER)

$(REQUIREMENTS).out: $(VENV)/$(MARKER) $(REQUIREMENTS).txt
	$(VENV)/python -m pip install -r $(REQUIREMENTS).txt
	$(VENV)/python -m pip freeze -r $(REQUIREMENTS).txt > $(REQUIREMENTS).out

$(REQUIREMENTS_TEST).out: $(VENV)/$(MARKER) $(REQUIREMENTS_TEST).txt
	$(VENV)/python -m pip install -r $(REQUIREMENTS_TEST).txt
	$(VENV)/python -m pip freeze -r $(REQUIREMENTS_TEST).txt > $(REQUIREMENTS_TEST).out

.PHONY: clean-venv
clean-venv:  ## Delete the virtual environment
	-$(RM) -r "$(VENVDIR)"
        
.PHONY: clean-img
clean-img:  ## Delete all generated graphics files
	-$(RM) ./*.png
        
.PHONY: clean-test
clean-test: clean-pycache  ## Delete all output and intermediate files generated by unit tests
	-$(RM) -r $(PYTHON_ROOT)/.coverage

.PHONY: clean-build
clean-build:  ## Delete build distribution and intermediate build files
	-$(RM) -r $(PYTHON_ROOT)/build $(PYTHON_ROOT)/dist
	-$(RM) -r $(PYTHON_ROOT)/build $(PYTHONPATH)/*.egg-info

.PHONY: clean-out
clean-out:
	-$(RM) $(REQUIREMENTS).out $(REQUIREMENTS_TEST).out
	@touch $(REQUIREMENTS).txt
	@touch $(REQUIREMENTS_TEST).txt
        
.PHONY: clean-pycache
clean-pycache:  ## Clean out cached bytecode (*.pyc) files
	-$(RM) -r $(PYTHONPATH)/__pycache__
	-$(RM) -r $(PYTHONPATH)/*/__pycache__
	-$(RM) -r ./test/__pycache__
	-$(RM) -r ./test/*/__pycache__
	
clean: clean-venv clean-img clean-build clean-test clean-out clean-pycache  ## Delete all output and intermediate files

.PHONY: cython
cython:  $(REQUIREMENTS).out
	cd $(PYTHONPATH) $(PYTHON) $(PYTHONPATH)/setup.py build_ext --inplace  

.PHONY: service
service: cython
	cd $(PYTHONPATH) && PYTHONPATH=$(PYTHONPATH) FLASK_APP=$(MAIN_MODULE) $(GUNICORN) --bind $(URL):$(PORT) --timeout 180 $(MAIN_MODULE):app

$(NODE_TARGET):
	cd $(NODE_ROOT) && npm install

.PHONY: ui
ui: $(NODE_TARGET)
	cd $(NODE_ROOT) && REACT_APP_IMPOSC_URL="$(URL)" REACT_APP_IMPOSC_PORT=$(PORT) npm run start

.PHONY: run
run: ui service

.PHONY: repl
repl: $(REQUIREMENTS).out
	$(PYTHON)

.PHONY: pytest
pytest:
	$(VENV)/python -m pip install pytest pytest-cov

.PHONY: test
test: $(REQUIREMENTS_TEST).out pytest
	$(PYTHON) -m pytest --cov=$(PYTHON_ROOT)

.PHONY: pylint
pylint: $(REQUIREMENTS).out ## Check source code for code quality
	$(VENV)/python -m pip install pylint
	$(PYTHON) -m pylint $(PYTHONPATH) --fail-under=5.5 -d C0303

.PHONY: help
help:  ## This help text
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'   
